use rand::Rng;

/// 1. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å (–Ω–µ–±–µ–∑–ø–µ—á–Ω–∞: –ø–æ–≤–µ—Ä—Ç–∞—î usize::MAX, —è–∫—â–æ –Ω–µ –º–æ–∂–Ω–∞)
fn count_permutation(shipments: &Vec<u32>) -> usize {
    let n = shipments.len();
    let total: u32 = shipments.iter().sum();

    if total as usize % n != 0 {
        return usize::MAX; // –ù–µ–º–æ–∂–ª–∏–≤–æ –∑—Ä—ñ–≤–Ω—è—Ç–∏
    }

    let avg = total / n as u32;
    let mut moves = 0;
    let mut diff = 0;

    for &load in shipments {
        diff += load as i32 - avg as i32;
        moves += diff.abs() as usize;
    }

    moves
}

/// 2. –ë–µ–∑–ø–µ—á–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑ Result
fn count_permutation_safe(shipments: &Vec<u32>) -> Result<usize, &'static str> {
    let n = shipments.len();
    let total: u32 = shipments.iter().sum();

    if total as usize % n != 0 {
        return Err("Impossible to balance cargo");
    }

    let avg = total / n as u32;
    let mut moves = 0;
    let mut diff = 0;

    for &load in shipments {
        diff += load as i32 - avg as i32;
        moves += diff.abs() as usize;
    }

    Ok(moves)
}

/// 3. –ì–µ–Ω–µ—Ä—É—î –∞–±—Å–æ–ª—é—Ç–Ω–æ –æ–¥–Ω–∞–∫–æ–≤—ñ –≤–∞–Ω—Ç–∞–∂—ñ
fn gen_shipments(n: usize) -> Vec<u32> {
    let mut rng = rand::thread_rng();
    let avg = rng.gen_range(10..100);
    (0..n).map(|_| avg).collect()
}

/// 4. –ì–µ–Ω–µ—Ä—É—î –±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, —è–∫—ñ –º–æ–∂–Ω–∞ –≤–∏—Ä—ñ–≤–Ω—è—Ç–∏
fn gen_balanced_shipments(n: usize) -> Vec<u32> {
    let mut rng = rand::thread_rng();
    let mut base: Vec<u32> = (0..n).map(|_| rng.gen_range(10..100)).collect();
    let total: u32 = base.iter().sum();
    let avg = total / n as u32;
    vec![avg; n]
}

/// 5. –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –¥—Ä—É–∫
fn print_shipments_info(shipments: &Vec<u32>) {
    println!("Shipments: {:?}", shipments);
    match count_permutation_safe(shipments) {
        Ok(moves) => println!("‚úÖ Minimum moves: {}", moves),
        Err(e) => println!("‚ùå Error: {}", e),
    }
}

fn main() {
    println!("üîπ –ü—Ä–∏–∫–ª–∞–¥ 1 (–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏): [1, 1, 1, 1, 6]");
    let example1 = vec![1, 1, 1, 1, 6];
    print_shipments_info(&example1);
    println!();

    println!("üîπ –ü—Ä–∏–∫–ª–∞–¥ 2 (—Ä–∞–Ω–¥–æ–º–Ω–æ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ)");
    let example2 = gen_balanced_shipments(5);
    print_shipments_info(&example2);
    println!();

    println!("üîπ –ü—Ä–∏–∫–ª–∞–¥ 3 (–æ–¥–Ω–∞–∫–æ–≤—ñ –≤–∞–Ω—Ç–∞–∂—ñ)");
    let example3 = gen_shipments(5);
    print_shipments_info(&example3);
    println!();

    println!("üîπ –ü—Ä–∏–∫–ª–∞–¥ 4 (–Ω–µ–º–æ–∂–ª–∏–≤–æ –∑—Ä—ñ–≤–Ω—è—Ç–∏): [10, 10, 10, 11]");
    let example4 = vec![10, 10, 10, 11];
    print_shipments_info(&example4);
}
